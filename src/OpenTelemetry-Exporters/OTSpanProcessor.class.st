"
I am responsible for processing and handling `OTSpan`s generated by an application.
I receive spans as they are created and am responsible for applying various processing steps to them.
These steps may include filtering, sampling, enriching, and forwarding to exporters.
Spans are processed in real time, providing immediate feedback and insight into application behavior.

By implementing custom SpanProcessor classes, developers can tailor span processing behavior to meet specific use cases and requirements.
"
Class {
	#name : #OTSpanProcessor,
	#superclass : #Object,
	#classVars : [
		'Instance'
	],
	#category : #'OpenTelemetry-Exporters'
}

{ #category : #accessing }
OTSpanProcessor class >> instance [

	^ Instance ifNil: [ Instance := self readConfiguration ]
]

{ #category : #accessing }
OTSpanProcessor class >> instance: aSpanProcessor [

	Instance := aSpanProcessor
]

{ #category : #accessing }
OTSpanProcessor class >> readConfiguration [
	"Use defaults for now, later should use properties or env vars as explained in https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/#configuring-the-agent"

	^ OTBatchSpanProcessor new
]

{ #category : #initialization }
OTSpanProcessor class >> reset [

	Instance ifNotNil: [ Instance flush ].
	Instance := nil
]

{ #category : #processing }
OTSpanProcessor >> flush [
	"Redefined by subclasses to terminate current span processing and forward to exporter."
]

{ #category : #processing }
OTSpanProcessor >> process: span [
	"Export the span and return true if it was accepted"

	self subclassResponsibility
]
